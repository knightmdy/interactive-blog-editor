import { saveAs } from 'file-saver'
import JSZip from 'jszip'
import type { Document, ExportConfig } from '@/types'

// 导出工具类
export class ExportUtils {
  // 导出为 HTML
  static async exportAsHTML(doc: Document, config: ExportConfig = {
    format: 'html',
    includeCSS: true,
    minify: false
  }): Promise<void> {
    try {
      console.log('🌐 生成HTML内容...')
      const html = this.generateHTML(doc, config)
      console.log('📝 HTML内容长度:', html.length)
      
      console.log('💾 创建Blob对象...')
      const blob = new Blob([html], { type: 'text/html;charset=utf-8' })
      
      const filename = `${doc.title || 'document'}.html`
      console.log('💿 开始下载文件:', filename)
      saveAs(blob, filename)
      console.log('✅ HTML导出成功')
    } catch (error) {
      console.error('❌ HTML导出失败:', error)
      throw new Error(`HTML导出失败: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }


  // 导出为静态站点
  static async exportAsStaticSite(doc: Document): Promise<void> {
    try {
      console.log('📦 准备静态站点导出...')
      const zip = new JSZip()
      
      // 生成 HTML 文件
      console.log('🌐 生成index.html...')
      const html = this.generateHTML(doc, { 
        format: 'html', 
        includeCSS: true, 
        minify: false 
      })
      zip.file('index.html', html)
      console.log('✅ index.html 已添加到ZIP')
      
      // 添加样式文件
      console.log('🎨 生成styles.css...')
      const css = this.generateCSS()
      zip.file('styles.css', css)
      console.log('✅ styles.css 已添加到ZIP')
      
      // 添加 JavaScript 文件
      console.log('⚡ 生成script.js...')
      const js = this.generateJS()
      zip.file('script.js', js)
      console.log('✅ script.js 已添加到ZIP')
      
      // 添加配置文件
      console.log('📋 生成package.json...')
      const packageJson = this.generatePackageJson(doc)
      zip.file('package.json', packageJson)
      console.log('✅ package.json 已添加到ZIP')
      
      console.log('📖 生成README.md...')
      const readme = this.generateReadme(doc)
      zip.file('README.md', readme)
      console.log('✅ README.md 已添加到ZIP')
      
      // 生成并下载 ZIP 文件
      console.log('🗜️ 压缩ZIP文件...')
      const blob = await zip.generateAsync({ type: 'blob' })
      
      const filename = `${doc.title || 'blog-site'}.zip`
      console.log('💿 开始下载ZIP文件:', filename)
      saveAs(blob, filename)
      console.log('✅ 静态站点导出成功')
    } catch (error) {
      console.error('❌ 静态站点导出失败:', error)
      throw new Error(`静态站点导出失败: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }

  // 生成 HTML 内容
  private static generateHTML(doc: Document, config: ExportConfig): string {
    const title = doc.title || 'Untitled Document'
    const content = this.processMarkdownContent(doc.content)
    
    return `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <meta name="description" content="Generated by Interactive Blog Editor">
    <meta name="generator" content="Interactive Blog Editor">
    ${config.includeCSS ? this.getInlineCSS() : '<link rel="stylesheet" href="styles.css">'}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css">
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@11.0.0/marked.min.js"></script>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1 class="site-title">${title}</h1>
            <div class="meta">
                <time datetime="${doc.createdAt.toISOString()}">
                    ${this.formatDate(doc.createdAt)}
                </time>
                ${doc.tags.length > 0 ? `
                <div class="tags">
                    ${doc.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
                ` : ''}
            </div>
        </header>
        
        <main class="content">
            <article class="article">
                ${content}
            </article>
        </main>
        
        <footer class="footer">
            <p>Generated by <a href="#" target="_blank">Interactive Blog Editor</a></p>
        </footer>
    </div>
    
    <script>
        ${this.getInteractiveJS()}
    </script>
</body>
</html>`
  }

  // 处理 Markdown 内容 - 使用简单解析
  private static processMarkdownContent(content: string): string {
    try {
      // 简化的Markdown解析，确保在浏览器环境中可靠工作
      let html = content
        // 处理标题
        .replace(/^#{6}\s+(.+)$/gm, '<h6>$1</h6>')
        .replace(/^#{5}\s+(.+)$/gm, '<h5>$1</h5>')
        .replace(/^#{4}\s+(.+)$/gm, '<h4>$1</h4>')
        .replace(/^#{3}\s+(.+)$/gm, '<h3>$1</h3>')
        .replace(/^#{2}\s+(.+)$/gm, '<h2>$1</h2>')
        .replace(/^#{1}\s+(.+)$/gm, '<h1>$1</h1>')
        
        // 处理粗体和斜体
        .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.+?)\*/g, '<em>$1</em>')
        
        // 处理行内代码
        .replace(/`([^`]+)`/g, '<code>$1</code>')
        
        // 处理链接
        .replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, href) => {
          const isExternal = this.isExternalLink(href)
          const targetAttr = isExternal ? ' target="_blank" rel="noopener noreferrer"' : ''
          const externalIcon = isExternal ? ' <span class="external-link-icon">↗</span>' : ''
          return `<a href="${href}"${targetAttr}>${text}${externalIcon}</a>`
        })
        
        // 处理图片
        .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto;" />')
        
        // 处理代码块
        .replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
          const language = lang || 'text'
          const escapedCode = this.escapeHtml(code.trim())
          
          // 特殊处理图表代码块
          if (language === 'chart') {
            try {
              const config = JSON.parse(code.trim())
              const chartId = `chart-${Math.random().toString(36).substr(2, 9)}`
              
              return `
                <div class="chart-container" id="${chartId}" data-config='${JSON.stringify(config)}'>
                  <div class="chart-header">
                    <span class="chart-type">${config.type || 'Chart'}</span>
                  </div>
                  <div class="chart-canvas" style="height: 300px;"></div>
                </div>
              `
            } catch (err) {
              return `<div class="error-block">图表配置解析错误</div>`
            }
          }
          
          return `<pre><code class="language-${language}">${escapedCode}</code></pre>`
        })
        
        // 处理表格
        .replace(/\|(.+)\|\n\|[-\s|]+\|\n((?:\|.+\|\n?)*)/g, (match, header, body) => {
          const headerCells = header.split('|').map(cell => `<th>${cell.trim()}</th>`).join('')
          const bodyRows = body.trim().split('\n').map(row => {
            const cells = row.split('|').map(cell => `<td>${cell.trim()}</td>`).join('')
            return `<tr>${cells}</tr>`
          }).join('')
          
          return `
            <div class="table-wrapper">
              <table class="markdown-table">
                <thead><tr>${headerCells}</tr></thead>
                <tbody>${bodyRows}</tbody>
              </table>
            </div>
          `
        })
        
        // 处理列表
        .replace(/^\* (.+)$/gm, '<li>$1</li>')
        .replace(/^- (.+)$/gm, '<li>$1</li>')
        .replace(/^\d+\. (.+)$/gm, '<li>$1</li>')
        
        // 处理段落
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>')
      
      // 包装在段落标签中
      if (!html.includes('<h') && !html.includes('<div') && !html.includes('<pre')) {
        html = `<p>${html}</p>`
      }
      
      return html
    } catch (error) {
      console.warn('Markdown processing failed:', error)
      return `<p>${this.escapeHtml(content)}</p>`
    }
  }
  
  // 检查是否为外链
  private static isExternalLink(href: string): boolean {
    try {
      const url = new URL(href, window.location.href)
      return url.hostname !== window.location.hostname
    } catch {
      return false
    }
  }
  
  // HTML 转义
  private static escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
  }

  // 获取内联CSS
  private static getInlineCSS(): string {
    return `<style>
      ${this.generateCSS()}
    </style>`
  }

  // 生成CSS样式
  private static generateCSS(): string {
    return `
/* 基础样式 */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #fff;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
}

/* 头部样式 */
.header {
    text-align: center;
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #e5e7eb;
}

.site-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 1rem;
}

.meta {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
    color: #6b7280;
    font-size: 0.875rem;
}

.tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.tag {
    background: #3b82f6;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 500;
}

/* 内容样式 */
.content {
    margin-bottom: 3rem;
}

.article {
    prose: true;
}

.article h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin: 2rem 0 1rem 0;
    line-height: 1.2;
}

.article h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
    margin: 1.5rem 0 0.75rem 0;
    line-height: 1.3;
}

.article h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin: 1.25rem 0 0.5rem 0;
    line-height: 1.4;
}

.article p {
    margin: 1rem 0;
    color: #374151;
    line-height: 1.7;
}

.article code {
    background: #f3f4f6;
    color: #dc2626;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
    font-size: 0.875em;
}

.article pre {
    background: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
}

.article pre code {
    background: transparent;
    color: inherit;
    padding: 0;
}

.article blockquote {
    border-left: 4px solid #3b82f6;
    background: #f8fafc;
    padding: 1rem;
    margin: 1rem 0;
    color: #4b5563;
    font-style: italic;
}

.article ul, .article ol {
    margin: 1rem 0;
    padding-left: 2rem;
}

.article li {
    margin: 0.5rem 0;
    color: #374151;
}

.article a {
    color: #3b82f6;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s;
}

.article a:hover {
    border-bottom-color: #3b82f6;
}

.article img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
}

.article table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
    overflow-x: auto;
    display: block;
    white-space: nowrap;
}

.article th,
.article td {
    border: 1px solid #e5e7eb;
    padding: 0.75rem;
    text-align: left;
}

.article th {
    background: #f9fafb;
    font-weight: 600;
    color: #1f2937;
}

/* 底部样式 */
.footer {
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid #e5e7eb;
    color: #6b7280;
    font-size: 0.875rem;
}

.footer a {
    color: #3b82f6;
    text-decoration: none;
}

.footer a:hover {
    text-decoration: underline;
}

/* 响应式设计 */
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }
    
    .site-title {
        font-size: 2rem;
    }
    
    .meta {
        flex-direction: column;
        gap: 0.5rem;
    }
}

/* 打印样式 */
@media print {
    @page {
        margin: 1in;
        size: A4;
    }
    
    * {
        -webkit-print-color-adjust: exact !important;
        color-adjust: exact !important;
        print-color-adjust: exact !important;
    }
    
    body {
        font-size: 12pt;
        line-height: 1.5;
        color: #000;
        background: #fff;
    }
    
    .container {
        max-width: none;
        padding: 0;
        margin: 0;
    }
    
    .header {
        margin-bottom: 1.5rem;
        page-break-after: avoid;
    }
    
    .site-title {
        font-size: 18pt;
        margin-bottom: 0.5rem;
    }
    
    .meta {
        font-size: 10pt;
        margin-bottom: 1rem;
    }
    
    .article h1 {
        font-size: 16pt;
        page-break-after: avoid;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }
    
    .article h2 {
        font-size: 14pt;
        page-break-after: avoid;
        margin-top: 0.8rem;
        margin-bottom: 0.4rem;
    }
    
    .article h3 {
        font-size: 12pt;
        page-break-after: avoid;
        margin-top: 0.6rem;
        margin-bottom: 0.3rem;
    }
    
    .article p {
        margin: 0.5rem 0;
        orphans: 3;
        widows: 3;
    }
    
    .article pre {
        page-break-inside: avoid;
        background: #f5f5f5 !important;
        border: 1px solid #ddd !important;
        padding: 0.5rem !important;
        font-size: 10pt;
        margin: 0.5rem 0;
    }
    
    .article code {
        background: #f5f5f5 !important;
        padding: 0.1rem 0.2rem !important;
        font-size: 10pt;
    }
    
    .article table {
        page-break-inside: avoid;
        font-size: 10pt;
        border-collapse: collapse;
        width: 100%;
        margin: 0.5rem 0;
    }
    
    .article th,
    .article td {
        border: 1px solid #000 !important;
        padding: 0.3rem !important;
    }
    
    .article th {
        background: #f0f0f0 !important;
        font-weight: bold;
    }
    
    .article img {
        max-width: 100% !important;
        page-break-inside: avoid;
        margin: 0.5rem 0;
    }
    
    .article blockquote {
        border-left: 3px solid #000 !important;
        background: #f9f9f9 !important;
        padding: 0.5rem !important;
        margin: 0.5rem 0;
        page-break-inside: avoid;
    }
    
    .article ul,
    .article ol {
        margin: 0.5rem 0;
        padding-left: 1.5rem;
    }
    
    .article li {
        margin: 0.2rem 0;
    }
    
    .article a {
        color: #000 !important;
        text-decoration: underline !important;
        border-bottom: none !important;
    }
    
    .article a[href]:after {
        content: " (" attr(href) ")";
        font-size: 9pt;
        color: #666;
    }
    
    .footer {
        display: none;
    }
    
    .chart-container {
        page-break-inside: avoid;
        border: 1px solid #ddd !important;
        margin: 0.5rem 0;
        padding: 0.5rem;
    }
    
    .chart-canvas {
        background: #fff !important;
    }
    
    .tag {
        border: 1px solid #000 !important;
        background: #f0f0f0 !important;
        color: #000 !important;
    }
}
`
  }

  // 生成交互式JavaScript
  private static getInteractiveJS(): string {
    return `
// 初始化页面
window.document.addEventListener('DOMContentLoaded', function() {
    // 代码高亮
    if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
    }
    
    // 渲染所有图表
    renderAllCharts();
});

// 图表渲染
function renderAllCharts() {
    if (typeof echarts === 'undefined') return;
    
    const chartContainers = window.document.querySelectorAll('.chart-container');
    chartContainers.forEach(container => {
        try {
            const config = JSON.parse(container.getAttribute('data-config'));
            const chartCanvas = container.querySelector('.chart-canvas');
            
            if (chartCanvas) {
                const chart = echarts.init(chartCanvas);
                chart.setOption(config);
                
                // 响应式调整
                window.addEventListener('resize', function() {
                    chart.resize();
                });
            }
        } catch (error) {
            console.error('Chart rendering failed:', error);
            container.innerHTML = '<div class="error-block">图表渲染失败</div>';
        }
    });
}

function renderChart(element, config) {
    if (typeof echarts !== 'undefined') {
        const chart = echarts.init(element);
        chart.setOption(config);
        
        window.addEventListener('resize', function() {
            chart.resize();
        });
    }
}

// 表格排序
window.document.querySelectorAll('table').forEach(table => {
    const headers = table.querySelectorAll('th');
    headers.forEach((header, index) => {
        header.style.cursor = 'pointer';
        header.addEventListener('click', () => sortTable(table, index));
    });
});

function sortTable(table, column) {
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    const sorted = rows.sort((a, b) => {
        const aText = a.cells[column].textContent.trim();
        const bText = b.cells[column].textContent.trim();
        
        if (!isNaN(aText) && !isNaN(bText)) {
            return parseFloat(aText) - parseFloat(bText);
        }
        
        return aText.localeCompare(bText);
    });
    
    tbody.innerHTML = '';
    sorted.forEach(row => tbody.appendChild(row));
}

// 图片缩放
window.document.querySelectorAll('img').forEach(img => {
    img.style.cursor = 'zoom-in';
    img.addEventListener('click', function() {
        if (this.style.transform === 'scale(1.5)') {
            this.style.transform = 'scale(1)';
            this.style.cursor = 'zoom-in';
        } else {
            this.style.transform = 'scale(1.5)';
            this.style.cursor = 'zoom-out';
        }
    });
});

// 平滑滚动到锚点
window.document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = window.document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});
`
  }

  // 生成 package.json
  private static generatePackageJson(doc: Document): string {
    return JSON.stringify({
      name: this.slugify(doc.title || 'blog-site'),
      version: '1.0.0',
      description: `Static blog site generated from "${doc.title}"`,
      main: 'index.html',
      scripts: {
        serve: 'python -m http.server 8000',
        deploy: 'echo "Deploy to your preferred hosting service"'
      },
      keywords: ['blog', 'static-site', 'markdown'],
      author: 'Interactive Blog Editor',
      license: 'MIT',
      devDependencies: {
        'http-server': '^14.1.1'
      }
    }, null, 2)
  }

  // 生成 README.md
  private static generateReadme(doc: Document): string {
    return `# ${doc.title || 'Blog Site'}

This is a static blog site generated by [Interactive Blog Editor](https://github.com/your-repo/interactive-blog-editor).

## Quick Start

1. Serve the site locally:
   \`\`\`bash
   # Using Python
   python -m http.server 8000
   
   # Using Node.js
   npx http-server
   \`\`\`

2. Open your browser and visit \`http://localhost:8000\`

## Deployment

You can deploy this static site to any web hosting service:

- **GitHub Pages**: Upload to a GitHub repository and enable Pages
- **Netlify**: Drag and drop the folder to Netlify
- **Vercel**: Import the folder as a new project
- **Firebase Hosting**: Use Firebase CLI to deploy

## Content

- **Created**: ${this.formatDate(doc.createdAt)}
- **Last Updated**: ${this.formatDate(doc.updatedAt)}
- **Tags**: ${doc.tags.join(', ') || 'None'}

---

Generated by Interactive Blog Editor
`
  }

  // 生成 JavaScript 文件
  private static generateJS(): string {
    return this.getInteractiveJS()
  }

  // 格式化日期
  private static formatDate(date: Date): string {
    return new Intl.DateTimeFormat('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date)
  }

  // 转换为URL友好的字符串
  private static slugify(text: string): string {
    return text
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '')
  }
}